!function(n,t){"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?module.exports=t():n.TappyChromeSerialCommunicator=t()}(this,function(){return ChromeSerialCommunicator=function(n,t){var e=this;"undefined"!=typeof t&&null!==t&&"object"==typeof t.serial?this.serial=t.serial:this.serial=chrome.serial,this.connectionId=null,this.path=n,this.isConnecting=!1,this.hasAttached=!1,this.disconnectImmediately=!1,this.dataReceivedCallback=function(n){},this.errorCallback=function(n){},this.readCallback=function(n){var t=n.connectionId,i=n.data;if(e.isConnected()&&t===e.connectionId){var o=new Uint8Array(i);e.dataReceivedCallback(o)}}},ChromeSerialCommunicator.prototype={attachReadWrite:function(){this.hasAttached||(this.hasAttached=!0,this.serial.onReceive.addListener(this.readCallback))},connect:function(n){var t=this;t.isConnecting||t.isConnected()||(t.isConnecting=!0,t.serial.connect(this.path,{bitrate:115200},function(e){t.isConnecting=!1,t.connectionId=e.connectionId,t.attachReadWrite(),"function"==typeof n&&n(),t.disconnectImmediately&&t.disconnectUnsafe()}))},flush:function(n){var t=this;if(!this.isConnected())throw new Error("Can't flush when not connected");t.serial.flush(t.connectionId,function(t){n(t)})},isConnected:function(){return null!==this.connectionId},disconnectUnsafe:function(n){var t=this;if(t.isConnecting)throw"Connection still in the process of being established";if(t.isConnected()){var e=t.connectionId;t.connectionId=null,t.serial.disconnect(e,function(t){"function"==typeof n&&n(t)})}},disconnect:function(n){var t=this;t.disconnectImmediately=!0,!t.isConnecting&&t.isConnected()&&t.disconnectUnsafe(n)},send:function(n){var t=this;t.serial.send(t.connectionId,n,function(e){if(e.hasOwnProperty("error")&&null!==e.error&&"function"==typeof t.callbacks.serialPortErrorCb){var i={sendInfo:e,buffer:n};t.errorCallback(i)}})},setDataCallback:function(n){var t=this;t.dataReceivedCallback=n},setErrorCallback:function(n){var t=this;t.errorCallback=n}},ChromeSerialCommunicator});